@page "/"
@using System.Timers 

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffeledAnimals.Count; animalNumber++)
            {
            var animal = shuffeledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
                <div @onclick="@(() => ButtonClick(animal, uniqueDescription))" class="col-3">
                    <button type="button" class="btn btn-outline-dark">
                        <h1>@animal</h1>
                    </button>
                </div>
            }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@code {
    List<string> animalEmoji = new List<string>()
    {
        "😺", "😺",
        "🦊", "🦊",
        "🐞", "🐞",
        "🕷", "🕷",
        "🦆", "🦆",
        "🦑", "🦑",
        "🐖", "🐖",
        "👻", "👻"
    };

    List<string> shuffeledAnimals = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetupGame();
    }

    private void SetupGame()
    {
        Random random = new Random();
        shuffeledAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescriptionFound = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            // Remember first selection of a pair
            lastAnimalFound = animal;
            lastDescriptionFound = animalDescription;

            timer.Start();
        }
        else if (lastAnimalFound == animal && animalDescription != lastDescriptionFound)
        {
            // Match was found, reset for next pair
            lastAnimalFound = string.Empty;

            // Replace the found animals with empty strings
            shuffeledAnimals = shuffeledAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();

            matchesFound++;
            if(matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";
                SetupGame();
            }
        }
        else
        {
            // Pair doesn't match
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
            .ToString("0.0s");
            StateHasChanged();
        });
    }
}